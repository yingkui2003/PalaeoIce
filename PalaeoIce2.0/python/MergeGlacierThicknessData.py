# ---------------------------------------------------------------------------
# MergeGlacierThicknessData.py
# This python code is to Merge the individual glacier thickness tif file generated by ..
# to one big Raster file, so that the data can be compared with the simulated ice thickness data by Volta and PalaeoIce
# Created by:
# Yingkui Li
# Department of Geography
# University of Tennessee
# Knoxville, TN 37996
# 03/01/2023
# ---------------------------------------------------------------------------

import os, glob
# Import arcpy module
import arcpy, sys
from arcpy import env
from arcpy.sa import *
#import numpy
import numpy as np

arcpy.env.overwriteOutput = True
arcpy.env.XYTolerance= "0.01 Meters"

arcpy.Delete_management("in_memory") ### Empty the in_memory
ArcGISPro = 0
arcpy.AddMessage("The current python version is: " + str(sys.version_info[0]))
if sys.version_info[0] == 2:  ##For ArcGIS 10, need to check the 3D and Spatial Extensions
    try:
        if arcpy.CheckExtension("Spatial")=="Available":
            arcpy.CheckOutExtension("Spatial")
        else:
            raise Exception ("not extension available")
            #print "not extension available"
    except:
        raise Exception ("unable to check out extension")
        #print "unable to check out extension"

    try:
        if arcpy.CheckExtension("3D")=="Available":
            arcpy.CheckOutExtension("3D")
        else:
            raise Exception ("not extension available")
            #print "not extension available"
    except:
        raise Exception ("unable to check out extension")
        #print "unable to check out extension"
elif sys.version_info[0] == 3:  ##For ArcGIS Pro
    ArcGISPro = 1
    #pass ##No need to Check
else:
    raise Exception("Must be using Python 2.x or 3.x")
    exit()   

# Script arguments
RGI_glacier_outlines = arcpy.GetParameterAsText(0)
Input_folder = arcpy.GetParameterAsText(1)
output_glacier_outlines = arcpy.GetParameterAsText(2)
output_raster = arcpy.GetParameterAsText(3)

if arcpy.Exists(output_raster):
    arcpy.Delete_management(output_raster)


arcpy.Delete_management("in_memory")

spatialref=arcpy.Describe(RGI_glacier_outlines).spatialReference

RGIID = "RGIId"
outlineArray = arcpy.da.FeatureClassToNumPyArray(RGI_glacier_outlines,RGIID)
RGIIDs = np.array([item[0] for item in outlineArray])

arcpy.AddMessage("Step 1: Merge ice thickness raster")
outRaster = Input_folder + "\\outRaster"
b_copied = 0
for rgi_id in RGIIDs:
    #arcpy.AddMessage(rgi_id)
    tifname = rgi_id+"_thickness.tif"
    inRaster = os.path.join(Input_folder, tifname)
    #arcpy.AddMessage(inRaster)
    arcpy.AddMessage("Glacier Thickness file: " + tifname)
    try:
        if b_copied == 0:
            arcpy.CopyRaster_management (inRaster, outRaster)
            b_copied = 1
        else:
            arcpy.Mosaic_management(inRaster, outRaster, "MAXIMUM","","", "", "", "", "") ##use maximum
    except:
        arcpy.AddMessage("The current glacier outline does not have the corresponding thickness rater")
        pass

##setNull for the thickness of zero
outCon = Con(Raster(outRaster) > 0, Raster(outRaster))
outCon.save(output_raster)

        
arcpy.AddMessage("Step 2: Derive ice thickness statistics for each glacier")
outlines_copy = "in_memory\\outlines_copy"
outTable = "in_memory\\outTable"
#outTable = "c:\\test\\outTable.dbf"
arcpy.CopyFeatures_management(RGI_glacier_outlines, outlines_copy)
FcID = arcpy.Describe(outlines_copy).OIDFieldName

ZonalStatisticsAsTable(outlines_copy, FcID, output_raster, 
                                 outTable, "#", "ALL")
joinField = FcID ## + "_1"
arcpy.management.JoinField(outlines_copy, FcID, outTable, joinField)

arcpy.CopyFeatures_management(outlines_copy, output_glacier_outlines)

arcpy.Delete_management(outRaster)
arcpy.Delete_management("in_memory")
